{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/Utils/utils.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAI,KAAU,EAAE,sBAA8B,EAAE,EAAE;IACvF,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,GAAU,EAAE,GAAM,EAAE,GAAW,EAAE,EAAE;QACtD,IAAI,GAAG,GAAG,sBAAsB,KAAK,CAAC,EAAE;YACtC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACjB;aAAM;YACL,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC/B;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,MAAc,EAAE,IAAY,EAAY,EAAE,CACnF,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAM,EAAE,CAAS,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AAE7D,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,EAAc,EAAE,KAAK,GAAG,GAAG,EAAE,EAAE;IACtD,IAAI,UAAU,GAAG,KAAK,CAAC;IAEvB,OAAO,CAAC,GAAG,IAAQ,EAAE,EAAE;QACrB,IAAI,UAAU;YAAE,OAAO;QAEvB,EAAE,CAAC,GAAI,IAAW,CAAC,CAAC;QACpB,UAAU,GAAG,IAAI,CAAC;QAClB,UAAU,CAAC,GAAG,EAAE;YACd,UAAU,GAAG,KAAK,CAAC;QACrB,CAAC,EAAE,KAAK,CAAC,CAAC;IACZ,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAN,IAAY,MAIX;AAJD,WAAY,MAAM;IAChB,2BAAiB,CAAA;IACjB,2BAAiB,CAAA;IACjB,6BAAmB,CAAA;AACrB,CAAC,EAJW,MAAM,KAAN,MAAM,QAIjB;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACnC,MAAM,WAAW,GAAG;QAClB,MAAM,EAAE,EAAE;QACV,MAAM,EAAE,EAAE;QACV,OAAO,EAAE,EAAE;KACZ,CAAC;IAEF,OAAO,UAAU,CAAC,eAAe,WAAW,CAAC,OAAO,MAAM,CAAC,CAAC,OAAO;QACjE,CAAC,CAAC,MAAM,CAAC,OAAO;QAChB,CAAC,CAAC,UAAU,CAAC,eAAe,WAAW,CAAC,MAAM,MAAM,CAAC,CAAC,OAAO;YAC7D,CAAC,CAAC,MAAM,CAAC,MAAM;YACf,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;AACpB,CAAC,CAAC","sourcesContent":["export const splitArrayIntoNestedArray = <T>(array: T[], elementsPerNestedArray: number) => {\n    return array.reduce((acc: T[][], cur: T, idx: number) => {\n      if (idx % elementsPerNestedArray === 0) {\n        acc.push([cur]);\n      } else {\n        acc[acc.length - 1].push(cur);\n      }\n      return acc;\n    }, []);\n  };\n  \n  export const incrementedArrayFromNumber = (number: number, step: number): number[] =>\n    Array.from(Array(number), (_: any, i: number) => i + step);\n\n  export const throttle = (cb: () => void, delay = 100) => {\n    let shouldWait = false;\n  \n    return (...args: []) => {\n      if (shouldWait) return;\n  \n      cb(...(args as []));\n      shouldWait = true;\n      setTimeout(() => {\n        shouldWait = false;\n      }, delay);\n    };\n  };\n  \n  export enum Device {\n    Mobile = 'mobile',\n    Tablet = 'tablet',\n    Desktop = 'desktop'\n  }\n  \n  export const checkBreakpoints = () => {\n    const breakpoints = {\n      mobile: 32,\n      tablet: 48,\n      desktop: 72\n    };\n  \n    return matchMedia(`(min-width: ${breakpoints.desktop}rem)`).matches\n      ? Device.Desktop\n      : matchMedia(`(min-width: ${breakpoints.tablet}rem)`).matches\n      ? Device.Tablet\n      : Device.Mobile;\n  };"]}